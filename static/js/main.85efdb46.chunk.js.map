{"version":3,"sources":["components/selector.js","components/trivia.js","App.js","serviceWorker.js","index.js"],"names":["Selector","input","className","id","type","required","maxLength","size","max","min","placeholder","onChange","Trivia","data","year","trivia","charAt","toUpperCase","slice","App","componentDidMount","fetching","state","numberCath","event","console","log","target","value","setState","Math","floor","random","number","fetch","then","response","text","catch","this","prevProps","prevState","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kOAyBeA,G,MAvBC,SAAC,GAAW,IAAVC,EAAS,EAATA,MAGd,OACI,yBAAKC,UAAU,QACX,8BACI,2BAAOA,UAAU,WACTC,GAAG,OACHC,KAAK,SACLC,UAAQ,EACRC,UAAU,IACVC,KAAK,IACLC,IAAI,OACJC,IAAI,QACJC,YAAY,OACZC,SAAUV,QCCnBW,EAhBA,SAAC,GAAU,IAATC,EAAQ,EAARA,KACb,MAAU,KAAPA,EAEK,yBAAKX,UAAU,IACX,uBAAGA,UAAU,eAAeW,EAAKC,MAGjC,uBAAGZ,UAAU,uBAAuBW,EAAKE,OAAOC,OAAO,GAAGC,cAAcJ,EAAKE,OAAOG,MAAM,KAK3F,IC0CAC,E,kDAjDb,aAAc,IAAD,8BACX,gBAkBFC,kBAAkB,WAChB,EAAKC,SAAS,EAAKC,MAAMR,OApBd,EA4BbS,WAAW,SAACC,GACVC,QAAQC,IAAI,QAAQF,EAAMG,OAAOC,OACT,KAArBJ,EAAMG,OAAOC,OAEd,EAAKC,SAAS,CAACf,KAAKU,EAAMG,OAAOC,QAEnCH,QAAQC,IAAR,aAA0B,EAAKJ,MAAMR,MACrCW,QAAQC,IAAR,eAA4B,EAAKJ,MAAMP,SAhCvC,EAAKO,MAAM,CAEPR,KAAMgB,KAAKC,MAAsB,IAAhBD,KAAKE,UACtBjB,OAAQ,IAND,E,qDAUJkB,GAAQ,IAAD,OAEdC,MAAM,yBAAD,OAA0BD,EAA1B,mBACJE,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAtB,GAAI,OAAE,EAAKgB,SAAS,CAACd,OAAOF,OACjCyB,MAAMb,QAAQC,IAAR,mBACPD,QAAQC,IAAR,WAAuBa,KAAKjB,MAAMR,KAAKyB,KAAKjB,MAAMP,U,yCAOjCyB,EAAWC,GACxBF,KAAKjB,MAAMR,OAAS2B,EAAU3B,MAChCyB,KAAKlB,SAASkB,KAAKjB,MAAMR,Q,+BAe3B,OACE,yBAAKZ,UAAU,UACb,kBAAC,EAAD,CAAUD,MAAOsC,KAAKhB,aACtB,kBAAC,EAAD,CAAQV,KAAM0B,KAAKjB,a,GA7CToB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAoB,GACLjC,QAAQiC,MAAMA,EAAMC,a","file":"static/js/main.85efdb46.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Selector =({input})=>{\r\n\r\n  \r\n    return (\r\n        <div className=\"pt5 \">\r\n            <form >\r\n                <input className=\"shadow-4\"\r\n                        id=\"year\" \r\n                        type=\"number\" \r\n                        required \r\n                        maxLength='4' \r\n                        size='4' \r\n                        max='2020' \r\n                        min=\"-2000\" \r\n                        placeholder=\"year\"\r\n                        onChange={input}\r\n                />\r\n                {/* <input type=\"submit\" value=\"submit\"/> */}\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Selector","import React from 'react';\r\n\r\nconst Trivia = ({data})=>{\r\n    if(data!==\"\"){\r\n        return(\r\n            <div className=\"\">\r\n                <p className=\"garamond f1\">{data.year}</p>\r\n                \r\n                {/* Phrase capitilized */}\r\n                <p className=\"baskerville  f2 ph7\">{data.trivia.charAt(0).toUpperCase()+data.trivia.slice(1)}</p>\r\n            </div>\r\n        )\r\n        \r\n    }else{\r\n        return \"\"\r\n    }\r\n}\r\n\r\nexport default Trivia;","import React, {Component} from 'react';\nimport './App.css';\nimport Selector from './components/selector.js'\nimport Trivia from './components/trivia.js'\n\nclass App extends Component {\n  \n  constructor(){\n    super()\n      \n    this.state={\n        /* initial value:random year */\n        year: Math.floor(Math.random() * 2000),\n        trivia: \"\"\n    }\n  }\n  \n  fetching(number){\n    /* with fragment avoid print the year */\n    fetch(`http://numbersapi.com/${number}/year?fragment`)\n    .then(response=>response.text())\n    .then(data=>this.setState({trivia:data}))\n    .catch(console.log(`error fetching`))\n    console.log(`fetching`,this.state.year,this.state.trivia)\n  }\n\n  componentDidMount=()=>{\n    this.fetching(this.state.year)    \n  }\n\n  componentDidUpdate(prevProps, prevState){\n    if (this.state.year !== prevState.year)\n      this.fetching(this.state.year);       \n  }\n\n  numberCath=(event)=>{\n    console.log(\"event\",event.target.value)\n    if(event.target.value!==\"\"){\n\n      this.setState({year:event.target.value})\n    }\n    console.log(`state.year`, this.state.year)\n    console.log(`state.trivia`, this.state.trivia)\n  }\n  \n  render(){\n    \n    return (\n      <div className=\"tc bg \">        \n        <Selector input={this.numberCath}/>\n        <Trivia data={this.state}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}